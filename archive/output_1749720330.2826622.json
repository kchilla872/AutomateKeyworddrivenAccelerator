{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "playwright = <playwright._impl._playwright.Playwright object at 0x00000191D4F35840>, request = <SubRequest 'page' for <Function test_TC001_View_Workspaces>>\n\n    @pytest.fixture(scope=\"session\", autouse=True)\n    def page(playwright, request):\n        if request.config.getoption(\"hidden\") == True and request.config.getoption(\"runZap\") == True:\n            browser = playwright.chromium.launch(headless=True, args=['--no-sandbox', '--ignore-certificate-errors',\n                                                                      '--disable-setuid-sandbox'],\n                                                 proxy={\"server\": 'localhost:8080'})\n        elif request.config.getoption(\"hidden\") == False and request.config.getoption(\"runZap\") == True:\n            browser = playwright.chromium.launch(headless=False, args=['--no-sandbox', '--ignore-certificate-errors',\n                                                                       '--disable-setuid-sandbox'],\n                                                 proxy={\"server\": 'localhost:8080'})\n        elif request.config.getoption(\"hidden\") == True and request.config.getoption(\"runZap\") == False:\n            browser = playwright.chromium.launch(headless=True, args=['--no-sandbox', '--disable-setuid-sandbox'])\n        else:\n            browser = playwright.chromium.launch(headless=False, args=['--no-sandbox', '--disable-setuid-sandbox'])\n    \n        if request.config.getoption(\"video\") == True:\n            context = browser.new_context(record_video_dir=\"videos/\", storage_state=\"test.json\")\n        else:\n>           context = browser.new_context(storage_state=\"test.json\")\n\nconftest.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\playwright\\sync_api\\_generated.py:10898: in new_context\n    self._sync(\nvenv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py:111: in _sync\n    return task.result()\nvenv\\lib\\site-packages\\playwright\\_impl\\_browser.py:113: in new_context\n    await normalize_context_params(self._connection._is_sync, params)\nvenv\\lib\\site-packages\\playwright\\_impl\\_browser.py:225: in normalize_context_params\n    params[\"storageState\"] = json.loads(\nC:\\Program Files\\Python310\\lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nC:\\Program Files\\Python310\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x00000191D1D7BD30>\ns = 'cd {\\n  \"cookies\": [\\n    {\\n      \"sameSite\": \"None\",\\n      \"name\": \"__bpn_uid\",\\n      \"value\": \"31753f70-981a-449...     \"name\": \"csa-ctoken-RCFRJFGRQPMVQ83J40FC\",\\n          \"value\": \"1749721738087\"\\n        }\\n      ]\\n    }\\n  ]\\n}'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Program Files\\Python310\\lib\\json\\decoder.py:355: JSONDecodeError\n", "test_name": "test_TC001_View_Workspaces", "rerun": "0"}}, "suite_name": "test_homePage.py"}}}, "date": "June 12, 2025", "start_time": 1749719859.5649278, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}
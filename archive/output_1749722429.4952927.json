{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "playwright = <playwright._impl._playwright.Playwright object at 0x000001BC3AF1BC40>, request = <SubRequest 'page' for <Function test_TC001_View_Workspaces>>\n\n    @pytest.fixture(scope=\"session\", autouse=True)\n    def page(playwright: Playwright, request):\n        # Determine browser launch options based on CLI options\n        hidden = request.config.getoption(\"hidden\")\n        runZap = request.config.getoption(\"runZap\")\n        add_video = request.config.getoption(\"add_video\")\n    \n        launch_args = ['--no-sandbox', '--disable-setuid-sandbox']\n        if runZap:\n            launch_args.append('--ignore-certificate-errors')\n    \n        proxy = {\"server\": 'localhost:8080'} if runZap else None\n    \n        browser = playwright.chromium.launch(\n            headless=hidden,\n            args=launch_args,\n            proxy=proxy\n        )\n    \n        storage_path = \"test.json\"\n        if os.path.exists(storage_path):\n            # Validate JSON format\n            import json\n            with open(storage_path, 'r') as f:\n>               json.load(f)\n\nconftest.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Program Files\\Python310\\lib\\json\\__init__.py:293: in load\n    return loads(fp.read(),\nC:\\Program Files\\Python310\\lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nC:\\Program Files\\Python310\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x000001BC37D8BD30>\ns = 'cd {\\n  \"cookies\": [\\n    {\\n      \"sameSite\": \"None\",\\n      \"name\": \"__bpn_uid\",\\n      \"value\": \"31753f70-981a-449...     \"name\": \"csa-ctoken-RCFRJFGRQPMVQ83J40FC\",\\n          \"value\": \"1749721738087\"\\n        }\\n      ]\\n    }\\n  ]\\n}'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Program Files\\Python310\\lib\\json\\decoder.py:355: JSONDecodeError\n", "test_name": "test_TC001_View_Workspaces", "rerun": "0"}}, "suite_name": "test_homePage.py"}}}, "date": "June 12, 2025", "start_time": 1749720330.2826622, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}
{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 6}, "tests": {"0": {"status": "ERROR", "message": "playwright = <playwright._impl._playwright.Playwright object at 0x00000203DB45D660>, request = <SubRequest 'page' for <Function test_TC001_View_Logo>>\n\n    @pytest.fixture(scope=\"session\", autouse=True)\n    def page(playwright: Playwright, request):\n        # Determine browser launch options based on CLI options\n        hidden = request.config.getoption(\"hidden\")\n        runZap = request.config.getoption(\"runZap\")\n        add_video = request.config.getoption(\"add_video\")\n    \n        launch_args = ['--no-sandbox', '--disable-setuid-sandbox']\n        if runZap:\n            launch_args.append('--ignore-certificate-errors')\n    \n        proxy = {\"server\": 'localhost:8080'} if runZap else None\n    \n        browser = playwright.chromium.launch(\n            headless=hidden,\n            args=launch_args,\n            proxy=proxy\n        )\n    \n        storage_path = \"state.json\"\n        if os.path.exists(storage_path):\n            # Validate JSON format\n            import json\n            with open(storage_path, 'r') as f:\n                json.load(f)\n            context = browser.new_context(storage_state=storage_path)\n        else:\n            context = browser.new_context()\n    \n        if add_video:\n            context = browser.new_context(\n                record_video_dir=\"videos/\",\n                storage_state=storage_path if os.path.exists(storage_path) else None\n            )\n    \n        page1 = context.new_page()\n        page1.set_default_timeout(60000)\n    \n        # Replace qa_url with your actual URL or parameterize it\n        qa_url = \"https://www.amazon.in\"\n>       page1.goto(qa_url)\n\nconftest.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\playwright\\sync_api\\_generated.py:7278: in goto\n    self._sync(\nvenv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py:111: in _sync\n    return task.result()\nvenv\\lib\\site-packages\\playwright\\_impl\\_page.py:466: in goto\n    return await self._main_frame.goto(**locals_to_params(locals()))\nvenv\\lib\\site-packages\\playwright\\_impl\\_frame.py:119: in goto\n    await self._channel.send(\"goto\", locals_to_params(locals()))\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:39: in send\n    return await self.inner_send(method, params, False)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Channel object at 0x00000203DB45D240>, method = 'goto', params = {'url': 'https://www.amazon.in'}, return_as_dict = False\n\n    async def inner_send(\n        self, method: str, params: Optional[Dict], return_as_dict: bool\n    ) -> Any:\n        if params is None:\n            params = {}\n        callback = self._connection._send_message_to_server(self._guid, method, params)\n        if self._connection._error:\n            error = self._connection._error\n            self._connection._error = None\n            raise error\n        done, _ = await asyncio.wait(\n            {\n                self._connection._transport.on_error_future,\n                callback.future,\n            },\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n        if not callback.future.done():\n            callback.future.cancel()\n>       result = next(iter(done)).result()\nE       playwright._impl._api_types.TimeoutError: Timeout 60000ms exceeded.\nE       =========================== logs ===========================\nE       navigating to \"https://www.amazon.in/\", waiting until \"load\"\nE       ============================================================\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:63: TimeoutError\n", "test_name": "test_TC001_View_Logo", "rerun": "0"}, "1": {"status": "ERROR", "message": "playwright = <playwright._impl._playwright.Playwright object at 0x00000203DB45D660>, request = <SubRequest 'page' for <Function test_TC001_View_Logo>>\n\n    @pytest.fixture(scope=\"session\", autouse=True)\n    def page(playwright: Playwright, request):\n        # Determine browser launch options based on CLI options\n        hidden = request.config.getoption(\"hidden\")\n        runZap = request.config.getoption(\"runZap\")\n        add_video = request.config.getoption(\"add_video\")\n    \n        launch_args = ['--no-sandbox', '--disable-setuid-sandbox']\n        if runZap:\n            launch_args.append('--ignore-certificate-errors')\n    \n        proxy = {\"server\": 'localhost:8080'} if runZap else None\n    \n        browser = playwright.chromium.launch(\n            headless=hidden,\n            args=launch_args,\n            proxy=proxy\n        )\n    \n        storage_path = \"state.json\"\n        if os.path.exists(storage_path):\n            # Validate JSON format\n            import json\n            with open(storage_path, 'r') as f:\n                json.load(f)\n            context = browser.new_context(storage_state=storage_path)\n        else:\n            context = browser.new_context()\n    \n        if add_video:\n            context = browser.new_context(\n                record_video_dir=\"videos/\",\n                storage_state=storage_path if os.path.exists(storage_path) else None\n            )\n    \n        page1 = context.new_page()\n        page1.set_default_timeout(60000)\n    \n        # Replace qa_url with your actual URL or parameterize it\n        qa_url = \"https://www.amazon.in\"\n>       page1.goto(qa_url)\n\nconftest.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\playwright\\sync_api\\_generated.py:7278: in goto\n    self._sync(\nvenv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py:111: in _sync\n    return task.result()\nvenv\\lib\\site-packages\\playwright\\_impl\\_page.py:466: in goto\n    return await self._main_frame.goto(**locals_to_params(locals()))\nvenv\\lib\\site-packages\\playwright\\_impl\\_frame.py:119: in goto\n    await self._channel.send(\"goto\", locals_to_params(locals()))\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:39: in send\n    return await self.inner_send(method, params, False)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Channel object at 0x00000203DB45D240>, method = 'goto', params = {'url': 'https://www.amazon.in'}, return_as_dict = False\n\n    async def inner_send(\n        self, method: str, params: Optional[Dict], return_as_dict: bool\n    ) -> Any:\n        if params is None:\n            params = {}\n        callback = self._connection._send_message_to_server(self._guid, method, params)\n        if self._connection._error:\n            error = self._connection._error\n            self._connection._error = None\n            raise error\n        done, _ = await asyncio.wait(\n            {\n                self._connection._transport.on_error_future,\n                callback.future,\n            },\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n        if not callback.future.done():\n            callback.future.cancel()\n>       result = next(iter(done)).result()\nE       playwright._impl._api_types.TimeoutError: Timeout 60000ms exceeded.\nE       =========================== logs ===========================\nE       navigating to \"https://www.amazon.in/\", waiting until \"load\"\nE       ============================================================\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:63: TimeoutError\n", "test_name": "test_TC002_SearchItem", "rerun": "0"}, "2": {"status": "ERROR", "message": "playwright = <playwright._impl._playwright.Playwright object at 0x00000203DB45D660>, request = <SubRequest 'page' for <Function test_TC001_View_Logo>>\n\n    @pytest.fixture(scope=\"session\", autouse=True)\n    def page(playwright: Playwright, request):\n        # Determine browser launch options based on CLI options\n        hidden = request.config.getoption(\"hidden\")\n        runZap = request.config.getoption(\"runZap\")\n        add_video = request.config.getoption(\"add_video\")\n    \n        launch_args = ['--no-sandbox', '--disable-setuid-sandbox']\n        if runZap:\n            launch_args.append('--ignore-certificate-errors')\n    \n        proxy = {\"server\": 'localhost:8080'} if runZap else None\n    \n        browser = playwright.chromium.launch(\n            headless=hidden,\n            args=launch_args,\n            proxy=proxy\n        )\n    \n        storage_path = \"state.json\"\n        if os.path.exists(storage_path):\n            # Validate JSON format\n            import json\n            with open(storage_path, 'r') as f:\n                json.load(f)\n            context = browser.new_context(storage_state=storage_path)\n        else:\n            context = browser.new_context()\n    \n        if add_video:\n            context = browser.new_context(\n                record_video_dir=\"videos/\",\n                storage_state=storage_path if os.path.exists(storage_path) else None\n            )\n    \n        page1 = context.new_page()\n        page1.set_default_timeout(60000)\n    \n        # Replace qa_url with your actual URL or parameterize it\n        qa_url = \"https://www.amazon.in\"\n>       page1.goto(qa_url)\n\nconftest.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\playwright\\sync_api\\_generated.py:7278: in goto\n    self._sync(\nvenv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py:111: in _sync\n    return task.result()\nvenv\\lib\\site-packages\\playwright\\_impl\\_page.py:466: in goto\n    return await self._main_frame.goto(**locals_to_params(locals()))\nvenv\\lib\\site-packages\\playwright\\_impl\\_frame.py:119: in goto\n    await self._channel.send(\"goto\", locals_to_params(locals()))\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:39: in send\n    return await self.inner_send(method, params, False)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Channel object at 0x00000203DB45D240>, method = 'goto', params = {'url': 'https://www.amazon.in'}, return_as_dict = False\n\n    async def inner_send(\n        self, method: str, params: Optional[Dict], return_as_dict: bool\n    ) -> Any:\n        if params is None:\n            params = {}\n        callback = self._connection._send_message_to_server(self._guid, method, params)\n        if self._connection._error:\n            error = self._connection._error\n            self._connection._error = None\n            raise error\n        done, _ = await asyncio.wait(\n            {\n                self._connection._transport.on_error_future,\n                callback.future,\n            },\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n        if not callback.future.done():\n            callback.future.cancel()\n>       result = next(iter(done)).result()\nE       playwright._impl._api_types.TimeoutError: Timeout 60000ms exceeded.\nE       =========================== logs ===========================\nE       navigating to \"https://www.amazon.in/\", waiting until \"load\"\nE       ============================================================\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:63: TimeoutError\n", "test_name": "test_TC003_AddtoCart", "rerun": "0"}, "3": {"status": "ERROR", "message": "playwright = <playwright._impl._playwright.Playwright object at 0x00000203DB45D660>, request = <SubRequest 'page' for <Function test_TC001_View_Logo>>\n\n    @pytest.fixture(scope=\"session\", autouse=True)\n    def page(playwright: Playwright, request):\n        # Determine browser launch options based on CLI options\n        hidden = request.config.getoption(\"hidden\")\n        runZap = request.config.getoption(\"runZap\")\n        add_video = request.config.getoption(\"add_video\")\n    \n        launch_args = ['--no-sandbox', '--disable-setuid-sandbox']\n        if runZap:\n            launch_args.append('--ignore-certificate-errors')\n    \n        proxy = {\"server\": 'localhost:8080'} if runZap else None\n    \n        browser = playwright.chromium.launch(\n            headless=hidden,\n            args=launch_args,\n            proxy=proxy\n        )\n    \n        storage_path = \"state.json\"\n        if os.path.exists(storage_path):\n            # Validate JSON format\n            import json\n            with open(storage_path, 'r') as f:\n                json.load(f)\n            context = browser.new_context(storage_state=storage_path)\n        else:\n            context = browser.new_context()\n    \n        if add_video:\n            context = browser.new_context(\n                record_video_dir=\"videos/\",\n                storage_state=storage_path if os.path.exists(storage_path) else None\n            )\n    \n        page1 = context.new_page()\n        page1.set_default_timeout(60000)\n    \n        # Replace qa_url with your actual URL or parameterize it\n        qa_url = \"https://www.amazon.in\"\n>       page1.goto(qa_url)\n\nconftest.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\playwright\\sync_api\\_generated.py:7278: in goto\n    self._sync(\nvenv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py:111: in _sync\n    return task.result()\nvenv\\lib\\site-packages\\playwright\\_impl\\_page.py:466: in goto\n    return await self._main_frame.goto(**locals_to_params(locals()))\nvenv\\lib\\site-packages\\playwright\\_impl\\_frame.py:119: in goto\n    await self._channel.send(\"goto\", locals_to_params(locals()))\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:39: in send\n    return await self.inner_send(method, params, False)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Channel object at 0x00000203DB45D240>, method = 'goto', params = {'url': 'https://www.amazon.in'}, return_as_dict = False\n\n    async def inner_send(\n        self, method: str, params: Optional[Dict], return_as_dict: bool\n    ) -> Any:\n        if params is None:\n            params = {}\n        callback = self._connection._send_message_to_server(self._guid, method, params)\n        if self._connection._error:\n            error = self._connection._error\n            self._connection._error = None\n            raise error\n        done, _ = await asyncio.wait(\n            {\n                self._connection._transport.on_error_future,\n                callback.future,\n            },\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n        if not callback.future.done():\n            callback.future.cancel()\n>       result = next(iter(done)).result()\nE       playwright._impl._api_types.TimeoutError: Timeout 60000ms exceeded.\nE       =========================== logs ===========================\nE       navigating to \"https://www.amazon.in/\", waiting until \"load\"\nE       ============================================================\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:63: TimeoutError\n", "test_name": "test_TC004_GotoCart", "rerun": "0"}, "4": {"status": "ERROR", "message": "playwright = <playwright._impl._playwright.Playwright object at 0x00000203DB45D660>, request = <SubRequest 'page' for <Function test_TC001_View_Logo>>\n\n    @pytest.fixture(scope=\"session\", autouse=True)\n    def page(playwright: Playwright, request):\n        # Determine browser launch options based on CLI options\n        hidden = request.config.getoption(\"hidden\")\n        runZap = request.config.getoption(\"runZap\")\n        add_video = request.config.getoption(\"add_video\")\n    \n        launch_args = ['--no-sandbox', '--disable-setuid-sandbox']\n        if runZap:\n            launch_args.append('--ignore-certificate-errors')\n    \n        proxy = {\"server\": 'localhost:8080'} if runZap else None\n    \n        browser = playwright.chromium.launch(\n            headless=hidden,\n            args=launch_args,\n            proxy=proxy\n        )\n    \n        storage_path = \"state.json\"\n        if os.path.exists(storage_path):\n            # Validate JSON format\n            import json\n            with open(storage_path, 'r') as f:\n                json.load(f)\n            context = browser.new_context(storage_state=storage_path)\n        else:\n            context = browser.new_context()\n    \n        if add_video:\n            context = browser.new_context(\n                record_video_dir=\"videos/\",\n                storage_state=storage_path if os.path.exists(storage_path) else None\n            )\n    \n        page1 = context.new_page()\n        page1.set_default_timeout(60000)\n    \n        # Replace qa_url with your actual URL or parameterize it\n        qa_url = \"https://www.amazon.in\"\n>       page1.goto(qa_url)\n\nconftest.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\playwright\\sync_api\\_generated.py:7278: in goto\n    self._sync(\nvenv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py:111: in _sync\n    return task.result()\nvenv\\lib\\site-packages\\playwright\\_impl\\_page.py:466: in goto\n    return await self._main_frame.goto(**locals_to_params(locals()))\nvenv\\lib\\site-packages\\playwright\\_impl\\_frame.py:119: in goto\n    await self._channel.send(\"goto\", locals_to_params(locals()))\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:39: in send\n    return await self.inner_send(method, params, False)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Channel object at 0x00000203DB45D240>, method = 'goto', params = {'url': 'https://www.amazon.in'}, return_as_dict = False\n\n    async def inner_send(\n        self, method: str, params: Optional[Dict], return_as_dict: bool\n    ) -> Any:\n        if params is None:\n            params = {}\n        callback = self._connection._send_message_to_server(self._guid, method, params)\n        if self._connection._error:\n            error = self._connection._error\n            self._connection._error = None\n            raise error\n        done, _ = await asyncio.wait(\n            {\n                self._connection._transport.on_error_future,\n                callback.future,\n            },\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n        if not callback.future.done():\n            callback.future.cancel()\n>       result = next(iter(done)).result()\nE       playwright._impl._api_types.TimeoutError: Timeout 60000ms exceeded.\nE       =========================== logs ===========================\nE       navigating to \"https://www.amazon.in/\", waiting until \"load\"\nE       ============================================================\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:63: TimeoutError\n", "test_name": "test_TC005_ViewCart", "rerun": "0"}, "5": {"status": "ERROR", "message": "playwright = <playwright._impl._playwright.Playwright object at 0x00000203DB45D660>, request = <SubRequest 'page' for <Function test_TC001_View_Logo>>\n\n    @pytest.fixture(scope=\"session\", autouse=True)\n    def page(playwright: Playwright, request):\n        # Determine browser launch options based on CLI options\n        hidden = request.config.getoption(\"hidden\")\n        runZap = request.config.getoption(\"runZap\")\n        add_video = request.config.getoption(\"add_video\")\n    \n        launch_args = ['--no-sandbox', '--disable-setuid-sandbox']\n        if runZap:\n            launch_args.append('--ignore-certificate-errors')\n    \n        proxy = {\"server\": 'localhost:8080'} if runZap else None\n    \n        browser = playwright.chromium.launch(\n            headless=hidden,\n            args=launch_args,\n            proxy=proxy\n        )\n    \n        storage_path = \"state.json\"\n        if os.path.exists(storage_path):\n            # Validate JSON format\n            import json\n            with open(storage_path, 'r') as f:\n                json.load(f)\n            context = browser.new_context(storage_state=storage_path)\n        else:\n            context = browser.new_context()\n    \n        if add_video:\n            context = browser.new_context(\n                record_video_dir=\"videos/\",\n                storage_state=storage_path if os.path.exists(storage_path) else None\n            )\n    \n        page1 = context.new_page()\n        page1.set_default_timeout(60000)\n    \n        # Replace qa_url with your actual URL or parameterize it\n        qa_url = \"https://www.amazon.in\"\n>       page1.goto(qa_url)\n\nconftest.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\playwright\\sync_api\\_generated.py:7278: in goto\n    self._sync(\nvenv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py:111: in _sync\n    return task.result()\nvenv\\lib\\site-packages\\playwright\\_impl\\_page.py:466: in goto\n    return await self._main_frame.goto(**locals_to_params(locals()))\nvenv\\lib\\site-packages\\playwright\\_impl\\_frame.py:119: in goto\n    await self._channel.send(\"goto\", locals_to_params(locals()))\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:39: in send\n    return await self.inner_send(method, params, False)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Channel object at 0x00000203DB45D240>, method = 'goto', params = {'url': 'https://www.amazon.in'}, return_as_dict = False\n\n    async def inner_send(\n        self, method: str, params: Optional[Dict], return_as_dict: bool\n    ) -> Any:\n        if params is None:\n            params = {}\n        callback = self._connection._send_message_to_server(self._guid, method, params)\n        if self._connection._error:\n            error = self._connection._error\n            self._connection._error = None\n            raise error\n        done, _ = await asyncio.wait(\n            {\n                self._connection._transport.on_error_future,\n                callback.future,\n            },\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n        if not callback.future.done():\n            callback.future.cancel()\n>       result = next(iter(done)).result()\nE       playwright._impl._api_types.TimeoutError: Timeout 60000ms exceeded.\nE       =========================== logs ===========================\nE       navigating to \"https://www.amazon.in/\", waiting until \"load\"\nE       ============================================================\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:63: TimeoutError\n", "test_name": "test_TC006_Unchecking_Checking_CartItems", "rerun": "0"}}, "suite_name": "test_homePage.py"}}}, "date": "June 12, 2025", "start_time": 1749739049.169137, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "6", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "6"}